syntax = "proto3";

package tutorial;

message Wrapper {
  SerializedGraph graph = 1;
}

enum x {
    a = 0;
}
message B {
}

message A {
  x x_instance = 1;
  int32 data = 2;
  int32 data2 = 100;
}

message SerializedGraph {
  message Tensor {
    enum Dtype {
      int8 = 0;
      int16 = 1;
      int32 = 2;
      int64 = 3;
      uint8 = 4;
      uint16 = 5;
      uint32 = 6;
      uint64 = 7;
      boolean = 8;
      float8 = 9;
      float16 = 10;
      float32 = 11;
      float64 = 12;
      none = 13;
    }
    repeated uint32 shape = 1;
    repeated uint32 stride = 2;
    uint32 offset = 3;
    uint32 size = 4;
    Dtype dtype = 5;

    bool is_view = 6;
    bool inplace_update_disallowed = 7;
    bool is_contiguous = 8;
    bool is_complete = 9;
    bool is_over_complete = 10;

    bool is_sparse = 11;
    repeated uint32 dense_shape = 12;

    /* pred and succs represent ID, not pointer */
    uint64 pred = 13;
    repeated uint64 succs = 14;

    uint64 value_ref_cnt = 15;
    uint64 ticket_ref_cnt = 16;
    uint64 ticket_origin_ref_cnt = 17;

    /* autograd attrs */
    bool is_non_leaf = 18;
    bool requires_grad = 19;
    bool retains_grad = 20;

    uint64 python_tensor = 21;
    uint64 tensor_id = 22;
  }
  message Operation {
    uint32 op = 1;

    /* An already serialized operand.
     * Operator-wise deserialization needs to be performed. */
    string operand = 2;

    repeated uint64 inputs = 3;
    repeated uint64 outputs = 4;
    uint32 num_backwardable_inputs = 5;
    repeated int64 future_backward_inputs = 6;
    bool is_variable_shape_output = 7;
    uint64 op_id = 8;

    /* autograd operation attrs */
    repeated uint32 input_requires_grad = 9;
  }
  message Point {
    uint32 y = 1;
    uint32 x = 2;
  }

  repeated Tensor tensors = 1;
  repeated Operation operations = 2;
  repeated uint64 trace = 3;
  bytes data_bytes=4;
  uint32 data = 5;
  map<uint32, uint32> xxx = 6;
  repeated Point points = 7;
}
